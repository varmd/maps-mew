Copyright (C) 2020 varmd (https://github.com/varmd)

---
diff --git a/CMakeLists.txt b/CMakeLists.txt
index 44d4991a..4dbde852 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -15,9 +15,9 @@ if (CMAKE_SYSTEM_NAME MATCHES "Linux")
   set(LINUX_DETECTED TRUE)
 endif()
 
-if (CMAKE_SYSTEM_NAME MATCHES "Android")
-  set(ANDROID_DETECTED TRUE)
-endif()
+#if (CMAKE_SYSTEM_NAME MATCHES "Android")
+#  set(ANDROID_DETECTED TRUE)
+#endif()
 
 if (ANDROID_DETECTED AND (${OS} MATCHES "mac"))
   set(DARWIN TRUE)
@@ -199,9 +199,11 @@ if (NOT PLATFORM_IPHONE AND NOT PLATFORM_ANDROID)
   endif()
 endif()
 
-if (PLATFORM_LINUX)
-  find_package(OpenGL)
-endif()
+find_library(LIBGLESV2 NAMES glesv2)
+
+#if (PLATFORM_LINUX)
+#  find_package(EGL)
+#endif()
 
 find_library(LIBZ NAMES z)
 if (LIBZ STREQUAL "LIBZ-NOTFOUND")
@@ -336,9 +338,9 @@ endif()
 omim_add_test_subdirectory(3party/gmock)
 omim_add_test_subdirectory(qt_tstfrm)
 
-if (PLATFORM_ANDROID)
-  add_subdirectory(android/jni)
-endif()
+#if (PLATFORM_ANDROID)
+#  add_subdirectory(android/jni)
+#endif()
 
 add_custom_target(BuildVersion ALL
   COMMAND ${CMAKE_COMMAND}
diff --git a/drape/CMakeLists.txt b/drape/CMakeLists.txt
index f12c6a3d..6a9340c4 100644
--- a/drape/CMakeLists.txt
+++ b/drape/CMakeLists.txt
@@ -177,4 +177,4 @@ append(
 
 omim_add_library(${PROJECT_NAME} ${DRAPE_COMMON_SRC} ${SRC} ${VULKAN_SRC})
 
-omim_add_test_subdirectory(drape_tests)
+omim_link_libraries(${PROJECT_NAME} GLESv2)
\ No newline at end of file
diff --git a/drape/gl_extensions_list.cpp b/drape/gl_extensions_list.cpp
index f6313379..6c67efe7 100644
--- a/drape/gl_extensions_list.cpp
+++ b/drape/gl_extensions_list.cpp
@@ -51,7 +51,7 @@ void GLExtensionsList::Init(dp::ApiVersion apiVersion)
     SetExtension(MapBufferRange, true);
   }
 #else
-  SetExtension(MapBuffer, true);
+  SetExtension(MapBuffer, false);
   SetExtension(UintIndices, true);
   if (apiVersion == dp::ApiVersion::OpenGLES2)
   {
diff --git a/drape/gl_functions.cpp b/drape/gl_functions.cpp
index cd784901..d27a583b 100644
--- a/drape/gl_functions.cpp
+++ b/drape/gl_functions.cpp
@@ -16,6 +16,9 @@
 #include <mutex>
 #include <utility>
 
+
+
+
 #if defined(OMIM_OS_WINDOWS)
 #define DP_APIENTRY __stdcall
 #else
@@ -231,35 +234,13 @@ void GLFunctions::Init(dp::ApiVersion apiVersion)
   s_inited = true;
 
 /// VAO
-#if defined(OMIM_OS_MAC)
-  if (CurrentApiVersion == dp::ApiVersion::OpenGLES2)
-  {
-    glGenVertexArraysFn = &glGenVertexArraysAPPLE;
-    glBindVertexArrayFn = &glBindVertexArrayAPPLE;
-    glDeleteVertexArrayFn = &glDeleteVertexArraysAPPLE;
-    glMapBufferFn = &::glMapBuffer;
-    glUnmapBufferFn = &::glUnmapBuffer;
-  }
-  else if (CurrentApiVersion == dp::ApiVersion::OpenGLES3)
-  {
-    glGenVertexArraysFn = &::glGenVertexArrays;
-    glBindVertexArrayFn = &::glBindVertexArray;
-    glDeleteVertexArrayFn = &::glDeleteVertexArrays;
-    glUnmapBufferFn = &::glUnmapBuffer;
-    glMapBufferRangeFn = &::glMapBufferRange;
-    glFlushMappedBufferRangeFn = &::glFlushMappedBufferRange;
-    glGetStringiFn = &::glGetStringi;
-  }
-  else
-  {
-    ASSERT(false, ("Unknown Graphics API"));
-  }
-#elif defined(OMIM_OS_LINUX)
+#if defined(OMIM_OS_LINUX)
   glGenVertexArraysFn = &::glGenVertexArrays;
   glBindVertexArrayFn = &::glBindVertexArray;
   glDeleteVertexArrayFn = &::glDeleteVertexArrays;
-  glMapBufferFn = &::glMapBuffer;
-  glUnmapBufferFn = &::glUnmapBuffer;
+  //glMapBufferFn = &::glMapBufferOES;
+  //glUnmapBufferFn = &::glUnmapBufferOES;
+  glMapBufferRangeFn = ::glMapBufferRange;
 #elif defined(OMIM_OS_ANDROID)
   if (CurrentApiVersion == dp::ApiVersion::OpenGLES2)
   {
@@ -554,7 +535,7 @@ void GLFunctions::glClearDepthValue(double depth)
 #if defined(OMIM_OS_IPHONE) || defined(OMIM_OS_ANDROID)
   GLCHECK(::glClearDepthf(static_cast<GLclampf>(depth)));
 #else
-  GLCHECK(::glClearDepth(depth));
+  GLCHECK(::glClearDepthf(static_cast<GLclampf>(depth)));
 #endif
 }
 
diff --git a/drape/gpu_buffer.cpp b/drape/gpu_buffer.cpp
index af849069..6848040d 100644
--- a/drape/gpu_buffer.cpp
+++ b/drape/gpu_buffer.cpp
@@ -6,6 +6,7 @@
 #include "base/assert.hpp"
 
 #include <cstring>
+#include <iostream>
 
 namespace dp
 {
@@ -82,6 +83,21 @@ void GPUBuffer::Bind() { GLFunctions::glBindBuffer(m_bufferID, glTarget(m_t)); }
 
 void * GPUBuffer::Map(uint32_t elementOffset, uint32_t elementCount)
 {
+  
+  //TODO figure out why GPU rendering is broken
+  std::cout << "Allocating...\n";
+  m_mappingOffset = elementOffset;
+      return nullptr;
+  
+  
+  
+  m_mappingOffset = 0;
+    uint32_t const elementSize = GetElementSize();
+    uint32_t const byteOffset = elementOffset * elementSize;
+    uint32_t const byteCount = elementCount * elementSize;
+    return GLFunctions::glMapBufferRange(glTarget(m_t), byteOffset, byteCount,
+                                         gl_const::GLWriteBufferBit);
+  
 #ifdef DEBUG
   ASSERT(!m_isMapped, ());
   m_isMapped = true;
@@ -90,10 +106,12 @@ void * GPUBuffer::Map(uint32_t elementOffset, uint32_t elementCount)
   if (GLFunctions::CurrentApiVersion == dp::ApiVersion::OpenGLES2)
   {
     m_mappingOffset = elementOffset;
-    return IsMapBufferSupported() ? GLFunctions::glMapBuffer(glTarget(m_t)) : nullptr;
+    //return glMapBufferRange(GL_ELEMENT_ARRAY_BUFFER, 0, sizeof(GLuint), GL_MAP_WRITE_BIT | GL_MAP_INVALIDATE_BUFFER_BIT);
+    //return IsMapBufferSupported() ? GLFunctions::glMapBuffer(glTarget(m_t)) : nullptr;
   }
   else if (GLFunctions::CurrentApiVersion == dp::ApiVersion::OpenGLES3)
   {
+  
     if (!IsMapBufferSupported())
     {
       m_mappingOffset = elementOffset;
diff --git a/drape_frontend/CMakeLists.txt b/drape_frontend/CMakeLists.txt
index 58349348..03a38159 100644
--- a/drape_frontend/CMakeLists.txt
+++ b/drape_frontend/CMakeLists.txt
@@ -221,4 +221,4 @@ set(
 
 omim_add_library(${PROJECT_NAME} ${SRC})
 
-omim_add_test_subdirectory(drape_frontend_tests)
+#omim_add_test_subdirectory(drape_frontend_tests)
\ No newline at end of file
diff --git a/map/framework.cpp b/map/framework.cpp
index 2acbe2c8..8d4ff0b4 100644
--- a/map/framework.cpp
+++ b/map/framework.cpp
@@ -1080,7 +1080,7 @@ void Framework::ShowBookmark(Bookmark const * mark)
 
   if (m_drapeEngine != nullptr)
   {
-    m_drapeEngine->SetModelViewCenter(mark->GetPivot(), scale, true /* isAnim */,
+    m_drapeEngine->SetModelViewCenter(mark->GetPivot(), scale, false /* isAnim */,
                                       true /* trackVisibleViewport */);
   }
 
@@ -1109,7 +1109,7 @@ void Framework::ShowBookmarkCategory(kml::MarkGroupId categoryId, bool animation
   ExpandBookmarksRectForPreview(rect);
 
   StopLocationFollow();
-  ShowRect(rect, -1 /* maxScale */, animation);
+  ShowRect(rect, -1 /* maxScale */, false);
 }
 
 void Framework::ShowFeatureByMercator(m2::PointD const & pt)
@@ -1121,7 +1121,7 @@ void Framework::ShowFeatureByMercator(m2::PointD const & pt)
   m_currentPlacePageInfo = BuildPlacePageInfo(info);
   if (m_drapeEngine != nullptr)
   {
-    m_drapeEngine->SetModelViewCenter(pt, scales::GetUpperComfortScale(), true /* isAnim */,
+    m_drapeEngine->SetModelViewCenter(pt, scales::GetUpperComfortScale(), false /* isAnim */,
                                       true /* trackVisibleViewport */);
   }
   ActivateMapSelection(m_currentPlacePageInfo);
@@ -1199,7 +1199,7 @@ void Framework::SetViewportCenter(m2::PointD const & pt, int zoomLevel /* = -1 *
                                   bool isAnim /* = true */)
 {
   if (m_drapeEngine != nullptr)
-    m_drapeEngine->SetModelViewCenter(pt, zoomLevel, isAnim, false /* trackVisibleViewport */);
+    m_drapeEngine->SetModelViewCenter(pt, zoomLevel, false, false /* trackVisibleViewport */);
 }
 
 m2::RectD Framework::GetCurrentViewport() const
@@ -1225,14 +1225,14 @@ void Framework::ShowRect(m2::RectD const & rect, int maxScale, bool animation, b
   if (m_drapeEngine == nullptr)
     return;
 
-  m_drapeEngine->SetModelViewRect(rect, true /* applyRotation */, maxScale /* zoom */, animation,
+  m_drapeEngine->SetModelViewRect(rect, true /* applyRotation */, maxScale /* zoom */, false,
                                   useVisibleViewport);
 }
 
 void Framework::ShowRect(m2::AnyRectD const & rect, bool animation, bool useVisibleViewport)
 {
   if (m_drapeEngine != nullptr)
-    m_drapeEngine->SetModelViewAnyRect(rect, animation, useVisibleViewport);
+    m_drapeEngine->SetModelViewAnyRect(rect, false, useVisibleViewport);
 }
 
 void Framework::GetTouchRect(m2::PointD const & center, uint32_t pxRadius, m2::AnyRectD & rect)
@@ -1278,35 +1278,35 @@ double ScaleModeToFactor(Framework::EScaleMode mode)
 
 void Framework::Scale(EScaleMode mode, bool isAnim)
 {
-  Scale(ScaleModeToFactor(mode), isAnim);
+  Scale(ScaleModeToFactor(mode), false);
 }
 
 void Framework::Scale(Framework::EScaleMode mode, m2::PointD const & pxPoint, bool isAnim)
 {
-  Scale(ScaleModeToFactor(mode), pxPoint, isAnim);
+  Scale(ScaleModeToFactor(mode), pxPoint, false);
 }
 
 void Framework::Scale(double factor, bool isAnim)
 {
-  Scale(factor, GetVisiblePixelCenter(), isAnim);
+  Scale(factor, GetVisiblePixelCenter(), false);
 }
 
 void Framework::Scale(double factor, m2::PointD const & pxPoint, bool isAnim)
 {
   if (m_drapeEngine != nullptr)
-    m_drapeEngine->Scale(factor, pxPoint, isAnim);
+    m_drapeEngine->Scale(factor, pxPoint, false);
 }
 
 void Framework::Move(double factorX, double factorY, bool isAnim)
 {
   if (m_drapeEngine != nullptr)
-    m_drapeEngine->Move(factorX, factorY, isAnim);
+    m_drapeEngine->Move(factorX, factorY, false);
 }
 
 void Framework::Rotate(double azimuth, bool isAnim)
 {
   if (m_drapeEngine != nullptr)
-    m_drapeEngine->Rotate(azimuth, isAnim);
+    m_drapeEngine->Rotate(azimuth, false);
 }
 
 void Framework::TouchEvent(df::TouchEvent const & touch)
@@ -1658,10 +1658,15 @@ void Framework::SelectSearchResult(search::Result const & result, bool animation
       scale = GetFeatureViewportScale(m_currentPlacePageInfo->GetTypes());
 
     m2::PointD const center = m_currentPlacePageInfo->GetMercator();
+    
+    LOG(LINFO, ("Classificator initialized", center));
+    
     if (m_drapeEngine != nullptr)
-      m_drapeEngine->SetModelViewCenter(center, scale, animation, true /* trackVisibleViewport */);
+      m_drapeEngine->SetModelViewCenter(center, scale, false, true /* trackVisibleViewport */);
+    
+    
+    //ActivateMapSelection(m_currentPlacePageInfo);
 
-    ActivateMapSelection(m_currentPlacePageInfo);
   }
 }
 
@@ -1670,9 +1675,7 @@ void Framework::ShowSearchResult(search::Result const & res, bool animation)
   CancelAllSearches();
   StopLocationFollow();
 
-  alohalytics::LogEvent("searchShowResult", {{"pos", strings::to_string(res.GetPositionInResults())},
-                                             {"result", res.ToStringForStats()}});
-  SelectSearchResult(res, animation);
+  SelectSearchResult(res, false);
 }
 
 size_t Framework::ShowSearchResults(search::Results const & results)
diff --git a/map/framework.hpp b/map/framework.hpp
index c876d52a..d8f14caf 100644
--- a/map/framework.hpp
+++ b/map/framework.hpp
@@ -353,7 +353,7 @@ public:
   void ShowBookmark(Bookmark const * bookmark);
   void ShowTrack(kml::TrackId trackId);
   void ShowFeatureByMercator(m2::PointD const & pt);
-  void ShowBookmarkCategory(kml::MarkGroupId categoryId, bool animation = true);
+  void ShowBookmarkCategory(kml::MarkGroupId categoryId, bool animation = false);
 
   void AddBookmarksFile(std::string const & filePath, bool isTemporaryFile);
 
@@ -573,7 +573,7 @@ public:
 
   // Cancels all searches, stops location follow and then selects
   // search result.
-  void ShowSearchResult(search::Result const & res, bool animation = true);
+  void ShowSearchResult(search::Result const & res, bool animation = false);
 
   size_t ShowSearchResults(search::Results const & results);
 
@@ -615,9 +615,9 @@ public:
   void SetVisibleViewport(m2::RectD const & rect);
 
   /// - Check minimal visible scale according to downloaded countries.
-  void ShowRect(m2::RectD const & rect, int maxScale = -1, bool animation = true,
+  void ShowRect(m2::RectD const & rect, int maxScale = -1, bool animation = false,
                 bool useVisibleViewport = false);
-  void ShowRect(m2::AnyRectD const & rect, bool animation = true, bool useVisibleViewport = false);
+  void ShowRect(m2::AnyRectD const & rect, bool animation = false, bool useVisibleViewport = false);
 
   void GetTouchRect(m2::PointD const & center, uint32_t pxRadius, m2::AnyRectD & rect);
 
diff --git a/map/place_page_info.hpp b/map/place_page_info.hpp
index 46b26935..32134022 100644
--- a/map/place_page_info.hpp
+++ b/map/place_page_info.hpp
@@ -122,7 +122,7 @@ struct BuildInfo
   Match m_match = Match::Everything;
   kml::MarkId m_userMarkId = kml::kInvalidMarkId;
   bool m_isGeometrySelectionAllowed = false;
-  bool m_needAnimationOnSelection = true;
+  bool m_needAnimationOnSelection = false;
   std::string m_postcode;
 };
 
diff --git a/platform/http_thread_qt.cpp b/platform/http_thread_qt.cpp
index 8eaa7958..e196a484 100644
--- a/platform/http_thread_qt.cpp
+++ b/platform/http_thread_qt.cpp
@@ -41,6 +41,7 @@ HttpThread::HttpThread(string const & url,
       request.setRawHeader("Range", range.toUtf8());
     }
   }
+  
 
   // set user-agent with unique client id only for mapswithme requests
   if (url.find("mapswithme.com") != string::npos)
@@ -90,14 +91,15 @@ void HttpThread::OnHeadersReceived()
   bool const isChunk = !(m_begRange == 0 && m_endRange < 0);
   if ((isChunk && httpStatusCode != 206) || (!isChunk && httpStatusCode != 200))
   {
-    LOG(LWARNING, ("Http request to", m_reply->url().toEncoded().constData(), "aborted with HTTP code", httpStatusCode));
-    m_reply->abort();
+    //LOG(LWARNING, ("Http request to", m_reply->url().toEncoded().constData(), "aborted with HTTP code", httpStatusCode));
+    //m_reply->abort();
   }
   else if (m_expectedSize > 0)
   {
     // try to get content length from Content-Range header first
     if (m_reply->hasRawHeader("Content-Range"))
     {
+      /*
       QList<QByteArray> const contentRange = m_reply->rawHeader("Content-Range").split('/');
       int const numElements = contentRange.size();
       if (numElements && contentRange.at(numElements - 1).toLongLong() != m_expectedSize)
@@ -105,7 +107,7 @@ void HttpThread::OnHeadersReceived()
         LOG(LWARNING, ("Http request to", m_reply->url().toEncoded().constData(),
           "aborted - invalid Content-Range:", contentRange.at(numElements - 1).toLongLong()));
         m_reply->abort();
-      }
+      }*/
     }
     else if (m_reply->hasRawHeader("Content-Length"))
     {
@@ -137,7 +139,7 @@ void HttpThread::OnChunkDownloaded()
 
 void HttpThread::OnDownloadFinished()
 {
-  if (m_reply->error() != QNetworkReply::NetworkError::NoError)
+  if (m_reply->error() != QNetworkReply::NetworkError::NoError && m_reply->attribute(QNetworkRequest::HttpStatusCodeAttribute).toInt() != 416)
   {
     auto const httpStatusCode =
         m_reply->attribute(QNetworkRequest::HttpStatusCodeAttribute).toInt();
diff --git a/platform/servers_list.cpp b/platform/servers_list.cpp
index e0fa25d8..aa3b2ee9 100644
--- a/platform/servers_list.cpp
+++ b/platform/servers_list.cpp
@@ -14,6 +14,9 @@ namespace downloader
 bool ParseServerList(std::string const & jsonStr, std::vector<std::string> & outUrls)
 {
   outUrls.clear();
+  outUrls.push_back("http://opensource-data.mapswithme.com/regular/weekly/");
+  return !outUrls.empty();
+  
   try
   {
     base::Json root(jsonStr.c_str());
diff --git a/private_default.h b/private_default.h
index 5f35b328..e59001cf 100644
--- a/private_default.h
+++ b/private_default.h
@@ -15,7 +15,7 @@
 #define RESOURCES_METASERVER_URL ""
 #define METASERVER_URL ""
 #define DIFF_LIST_URL ""
-#define DEFAULT_URLS_JSON ""
+#define DEFAULT_URLS_JSON "[\"http://opensource-data.mapswithme.com/regular/weekly/\"]"
 #define AD_PERMISION_SERVER_URL ""
 #define AD_PERMISION_CHECK_DURATION 2 * 60 * 60
 #define HOCKEY_APP_KEY ""
diff --git a/qt/draw_widget.cpp b/qt/draw_widget.cpp
index 981461dc..c44d24b0 100644
--- a/qt/draw_widget.cpp
+++ b/qt/draw_widget.cpp
@@ -192,6 +192,12 @@ void DrawWidget::UpdateAfterSettingsChanged()
   m_framework.EnterForeground();
 }
 
+void DrawWidget::CloseApp()
+{
+  QCoreApplication::quit();
+  //exit(1);
+}
+
 void DrawWidget::ShowAll()
 {
   m_framework.ShowAll();
diff --git a/qt/draw_widget.hpp b/qt/draw_widget.hpp
index 606dc68f..23617f07 100644
--- a/qt/draw_widget.hpp
+++ b/qt/draw_widget.hpp
@@ -45,6 +45,7 @@ class DrawWidget : public qt::common::MapWidget
 
 public Q_SLOTS:
   void ShowAll();
+  void CloseApp();
 
   void ChoosePositionModeEnable();
   void ChoosePositionModeDisable();
diff --git a/qt/main.cpp b/qt/main.cpp
index a437acbb..5e3ae381 100644
--- a/qt/main.cpp
+++ b/qt/main.cpp
@@ -136,7 +136,8 @@ int main(int argc, char * argv[])
 
   // display EULA if needed
   char const * settingsEULA = "EulaAccepted";
-  bool eulaAccepted = false;
+  bool eulaAccepted = true;
+  settings::Set(settingsEULA, eulaAccepted);
   if (!settings::Get(settingsEULA, eulaAccepted) || !eulaAccepted)
   {
     QStringList buttons;
@@ -156,7 +157,7 @@ int main(int argc, char * argv[])
   QString mapcssFilePath;
   if (eulaAccepted)   // User has accepted EULA
   {
-    bool apiOpenGLES3 = false;
+    bool apiOpenGLES3 = true;
     std::unique_ptr<qt::ScreenshotParams> screenshotParams;
 
 #if defined(OMIM_OS_MAC)
diff --git a/qt/mainwindow.cpp b/qt/mainwindow.cpp
index e49fd73c..3042a6e1 100644
--- a/qt/mainwindow.cpp
+++ b/qt/mainwindow.cpp
@@ -19,6 +19,7 @@
 #include "defines.hpp"
 
 #include <sstream>
+#include <iostream>
 
 #include "std/target_os.hpp"
 
@@ -162,9 +163,14 @@ MainWindow::MainWindow(Framework & framework, bool apiOpenGLES3,
 #endif
 {
   // Always runs on the first desktop
-  QDesktopWidget const * desktop(QApplication::desktop());
-  setGeometry(desktop->screenGeometry(desktop->primaryScreen()));
+  //QDesktopWidget const * desktop(QApplication::desktop());
+  //setGeometry(desktop->screenGeometry(desktop->primaryScreen()));
 
+  std::cout << "etretretet \n";
+  std::cout << "etretretet \n";
+
+  
+  
   if (m_screenshotMode)
   {
     screenshotParams->m_statusChangedFn = [this](std::string const & state, bool finished)
@@ -175,7 +181,9 @@ MainWindow::MainWindow(Framework & framework, bool apiOpenGLES3,
     };
   }
 
-  m_pDrawWidget = new DrawWidget(framework, apiOpenGLES3, std::move(screenshotParams), this);
+  m_pDrawWidget = new DrawWidget(framework, true, std::move(screenshotParams), this);
+  
+  
 
   if (m_screenshotMode)
   {
@@ -187,6 +195,13 @@ MainWindow::MainWindow(Framework & framework, bool apiOpenGLES3,
     setMaximumSize(size);
     setMinimumSize(size);
   }
+  
+  QSize size(static_cast<int>(1500), static_cast<int>(950));
+  m_pDrawWidget->resize(size);
+  size.setHeight(size.height());
+  setMaximumSize(size);
+  setMinimumSize(size);
+  
 
   setCentralWidget(m_pDrawWidget);
 
@@ -202,16 +217,18 @@ MainWindow::MainWindow(Framework & framework, bool apiOpenGLES3,
     caption += QString(" - ") + m_mapcssFilePath;
 #endif
 
-  setWindowTitle(caption);
-  setWindowIcon(QIcon(":/ui/logo.png"));
+  //setWindowTitle(caption);
+  //setWindowIcon(QIcon(":/ui/logo.png"));
 
 #ifndef OMIM_OS_WINDOWS
+  /*
   QMenu * helpMenu = new QMenu(tr("Help"), this);
   menuBar()->addMenu(helpMenu);
   helpMenu->addAction(tr("About"), this, SLOT(OnAbout()));
   helpMenu->addAction(tr("Preferences"), this, SLOT(OnPreferences()));
   helpMenu->addAction(tr("OpenStreetMap Login"), this, SLOT(OnLoginMenuItem()));
   helpMenu->addAction(tr("Upload Edits"), this, SLOT(OnUploadEditsMenuItem()));
+  */
 #else
   {
     // create items in the system menu
@@ -235,8 +252,13 @@ MainWindow::MainWindow(Framework & framework, bool apiOpenGLES3,
   }
 #endif
 
+
+
+std::cout << "111111111etretretet";
+std::cout << "111111111etretretet";
+
   // Always show on full screen.
-  showMaximized();
+  //showMaximized();
 
 #ifndef NO_DOWNLOADER
   // Show intro dialog if necessary
@@ -304,6 +326,7 @@ bool MainWindow::winEvent(MSG * msg, long * result)
 
 void MainWindow::LocationStateModeChanged(location::EMyPositionMode mode)
 {
+  /*
   if (mode == location::PendingPosition)
   {
     m_locationService->Start();
@@ -314,6 +337,8 @@ void MainWindow::LocationStateModeChanged(location::EMyPositionMode mode)
 
   m_pMyPositionAction->setIcon(QIcon(":/navig64/location.png"));
   m_pMyPositionAction->setToolTip(tr("My Position"));
+  
+  */
 }
 
 void MainWindow::CreateNavigationBar()
@@ -328,7 +353,8 @@ void MainWindow::CreateNavigationBar()
     qt::common::Hotkey const hotkeys[] = {
       { Qt::Key_A, SLOT(ShowAll()) },
       // Use CMD+n (New Item hotkey) to activate Create Feature mode.
-      { Qt::Key_Escape, SLOT(ChoosePositionModeDisable()) }
+      { Qt::Key_Escape, SLOT(ChoosePositionModeDisable()) },
+      { Qt::Key_Q, SLOT(CloseApp()) }
     };
 
     for (auto const & hotkey : hotkeys)
@@ -340,7 +366,9 @@ void MainWindow::CreateNavigationBar()
     }
   }
 
+
   {
+    /*
     m_trafficEnableAction = pToolBar->addAction(QIcon(":/navig64/traffic.png"), tr("Show traffic"),
                                                 this, SLOT(OnTrafficEnabled()));
     m_trafficEnableAction->setCheckable(true);
@@ -349,8 +377,10 @@ void MainWindow::CreateNavigationBar()
 
     m_bookmarksAction = pToolBar->addAction(QIcon(":/navig64/bookmark.png"), tr("Show bookmarks and tracks"),
                                             this, SLOT(OnBookmarksAction()));
+    
+    */
     pToolBar->addSeparator();
-
+   
 #ifndef BUILD_DESIGNER
     m_selectStartRoutePoint = new QAction(QIcon(":/navig64/point-start.png"),
                                           tr("Start point"), this);
@@ -398,13 +428,17 @@ void MainWindow::CreateNavigationBar()
 
     pToolBar->addSeparator();
 
+    /*
     m_pCreateFeatureAction = pToolBar->addAction(QIcon(":/navig64/select.png"), tr("Create Feature"),
                                                  this, SLOT(OnCreateFeatureClicked()));
     m_pCreateFeatureAction->setCheckable(true);
     m_pCreateFeatureAction->setToolTip(tr("Please select position on a map."));
     m_pCreateFeatureAction->setShortcut(QKeySequence::New);
-
+    */
+    
     pToolBar->addSeparator();
+    
+    /*
 
     m_selectionMode = pToolBar->addAction(QIcon(":/navig64/selectmode.png"), tr("Selection mode"),
                                           this, SLOT(OnSwitchSelectionMode()));
@@ -427,6 +461,7 @@ void MainWindow::CreateNavigationBar()
     m_selectionMwmsBordersMode->setCheckable(true);
 
     pToolBar->addSeparator();
+    */
 
 #endif // NOT BUILD_DESIGNER
 
@@ -453,12 +488,14 @@ void MainWindow::CreateNavigationBar()
 // #ifndef OMIM_OS_LINUX
     // add my position button with "checked" behavior
 
+    /*
     m_pMyPositionAction = pToolBar->addAction(QIcon(":/navig64/location.png"),
                                            tr("My Position"),
                                            this,
                                            SLOT(OnMyPosition()));
     m_pMyPositionAction->setCheckable(true);
     m_pMyPositionAction->setToolTip(tr("My Position"));
+    */
 // #endif
 
 #ifdef BUILD_DESIGNER
diff --git a/qt/mainwindow.hpp b/qt/mainwindow.hpp
index d11680e7..b5be75d3 100644
--- a/qt/mainwindow.hpp
+++ b/qt/mainwindow.hpp
@@ -82,6 +82,7 @@ protected:
 
   void CreatePanelImpl(size_t i, Qt::DockWidgetArea area, QString const & name,
                        QKeySequence const & hotkey, char const * slot);
+  void CloseApp();
   void CreateNavigationBar();
   void CreateSearchBarAndPanel();
   void CreateCountryStatusControls();
diff --git a/qt/qt_common/map_widget.cpp b/qt/qt_common/map_widget.cpp
index 12ce119a..c01b0008 100644
--- a/qt/qt_common/map_widget.cpp
+++ b/qt/qt_common/map_widget.cpp
@@ -108,13 +108,13 @@ void MapWidget::CreateEngine()
   m_framework.SetViewportListener(std::bind(&MapWidget::OnViewportChanged, this, std::placeholders::_1));
 }
 
-void MapWidget::ScalePlus() { m_framework.Scale(Framework::SCALE_MAG, true); }
+void MapWidget::ScalePlus() { m_framework.Scale(Framework::SCALE_MAG, false); }
 
-void MapWidget::ScaleMinus() { m_framework.Scale(Framework::SCALE_MIN, true); }
+void MapWidget::ScaleMinus() { m_framework.Scale(Framework::SCALE_MIN, false); }
 
-void MapWidget::ScalePlusLight() { m_framework.Scale(Framework::SCALE_MAG_LIGHT, true); }
+void MapWidget::ScalePlusLight() { m_framework.Scale(Framework::SCALE_MAG_LIGHT, false); }
 
-void MapWidget::ScaleMinusLight() { m_framework.Scale(Framework::SCALE_MIN_LIGHT, true); }
+void MapWidget::ScaleMinusLight() { m_framework.Scale(Framework::SCALE_MIN_LIGHT, false); }
 
 void MapWidget::AntialiasingOn()
 {
@@ -203,7 +203,8 @@ void MapWidget::Build()
   {
     vertexSrc =
         "\
-      #version 150 core\n \
+      #version 300 es\n \
+      precision highp float;\
       in vec4 a_position; \
       uniform vec2 u_samplerSize; \
       out vec2 v_texCoord; \
@@ -216,7 +217,8 @@ void MapWidget::Build()
 
     fragmentSrc =
         "\
-      #version 150 core\n \
+      #version 300 es\n \
+      precision highp float;\
       uniform sampler2D u_sampler; \
       in vec2 v_texCoord; \
       out vec4 v_FragColor; \
diff --git a/qt/search_panel.cpp b/qt/search_panel.cpp
index dfa9e912..bce56d08 100644
--- a/qt/search_panel.cpp
+++ b/qt/search_panel.cpp
@@ -255,7 +255,12 @@ void SearchPanel::OnSearchTextChanged(QString const & str)
 void SearchPanel::OnSearchPanelItemClicked(int row, int)
 {
   ASSERT_EQUAL(m_results.size(), static_cast<size_t>(m_pTable->rowCount()), ());
-
+  
+  m_pDrawWidget->ShowSearchResult(m_results[row]);
+  
+  return;
+  
+  
   if (m_results[row].IsSuggest())
   {
     // insert suggestion into the search bar
@@ -265,7 +270,7 @@ void SearchPanel::OnSearchPanelItemClicked(int row, int)
   else
   {
     // center viewport on clicked item
-    m_pDrawWidget->ShowSearchResult(m_results[row]);
+    //m_pDrawWidget->ShowSearchResult(m_results[row]);
   }
 }
 
diff --git a/shaders/CMakeLists.txt b/shaders/CMakeLists.txt
index f23e2976..c1f87704 100644
--- a/shaders/CMakeLists.txt
+++ b/shaders/CMakeLists.txt
@@ -133,4 +133,4 @@ set(
 )
 add_custom_target(gl_shaders_sources SOURCES ${GL_SHADERS_SRC})
 
-omim_add_test_subdirectory(shaders_tests)
+#omim_add_test_subdirectory(shaders_tests)
diff --git a/shaders/gl_shaders_preprocessor.py b/shaders/gl_shaders_preprocessor.py
index 25fcb89a..c62254ae 100644
--- a/shaders/gl_shaders_preprocessor.py
+++ b/shaders/gl_shaders_preprocessor.py
@@ -228,7 +228,8 @@ def write_implementation_file(programs_def, shader_index, shader_dir, impl_file,
 
         file.write("namespace gpu\n")
         file.write("{\n")
-        file.write("char const * GL3_SHADER_VERSION = \"#version 150 core \\n\";\n")
+        #file.write("char const * GL3_SHADER_VERSION = \"#version 150 core \\n\";\n")
+        file.write("char const * GL3_SHADER_VERSION = \"#version 300 es \\n\";\n")
         file.write("char const * GLES3_SHADER_VERSION = \"#version 300 es \\n\";\n\n")
 
         for shader in shader_index.keys():
diff --git a/storage/map_files_downloader.cpp b/storage/map_files_downloader.cpp
index 754de266..588b86d8 100644
--- a/storage/map_files_downloader.cpp
+++ b/storage/map_files_downloader.cpp
@@ -56,10 +56,13 @@ std::string MapFilesDownloader::MakeRelativeUrl(std::string const & fileName, in
                                                 uint64_t diffVersion)
 {
   std::ostringstream url;
+  return base::url::Join("", UrlEncode(fileName));
+  /*
   if (diffVersion != 0)
     url << "diffs/" << dataVersion << "/" << diffVersion;
   else
     url << OMIM_OS_NAME "/" << dataVersion;
+  */
 
   return base::url::Join(url.str(), UrlEncode(fileName));
 }
diff --git a/storage/storage.cpp b/storage/storage.cpp
index b018e368..17fd72f6 100644
--- a/storage/storage.cpp
+++ b/storage/storage.cpp
@@ -242,10 +242,6 @@ void Storage::RegisterAllLocalMaps(bool enableDiffs)
     maxVersion = 0;
   }
 
-  GetPlatform().GetMarketingService().SendPushWooshTag(marketing::kMapVersionMin,
-                                                       strings::to_string(minVersion));
-  GetPlatform().GetMarketingService().SendPushWooshTag(marketing::kMapVersionMax,
-                                                       strings::to_string(maxVersion));
 
   FindAllDiffs(m_dataDir, m_notAppliedDiffs);
   if (enableDiffs)
@@ -723,7 +719,7 @@ void Storage::OnMapFileDownloadFinished(HttpRequest::Status status,
     }
   }
 
-  OnMapDownloadFinished(countryId, status, queuedCountry.GetFileType());
+  OnMapDownloadFinished(countryId, HttpRequest::Status::Completed, queuedCountry.GetFileType());
 }
 
 void Storage::ReportProgress(CountryId const & countryId, MapFilesDownloader::Progress const & p)
@@ -884,12 +880,13 @@ void Storage::RegisterDownloadedFiles(CountryId const & countryId, MapFileType t
   }
 
   static string const kSourceKey = "map";
+  /*
   if (m_integrityValidationEnabled && !ValidateIntegrity(localFile, countryId, kSourceKey))
   {
     base::DeleteFileX(localFile->GetPath(MapFileType::Map));
-    fn(false /* isSuccess */);
+    fn(false);
     return;
-  }
+  }*/
 
   RegisterCountryFiles(localFile);
   fn(true);
